import { IBlob, IFileTreeNode, IModule } from "./types";

// search for the first node in abstract syntax tree generated by esprima
export function findFirstNodeInAst(object: any, type: string): any | null {
  if (object.type == type) {
    return object;
  } else if (object.body || object.length) {
    let result = null;
    for (const obj of (object.body ? (object.body.length ? object.body : object.body.body) : object)) {
      if (obj.type === 'VariableDeclaration') {
        result = findFirstNodeInAst(obj.declarations, type);
      } else if (obj.type === 'VariableDeclarator') {
        result = findFirstNodeInAst(obj.init, type);
      } else {
        result = findFirstNodeInAst(obj, type);
      }
      if (result) break;
    }
    return result;
  }
  return null;
}

export function findPathInFileTree(path: string, tree: IModule): IModule | IFileTreeNode | null {
  let result = null;
  if (tree.path === path) {
    return tree;
  } else {
    if (!result) {
      for (const node of tree.blobs) {
        if (node.path === path) return node;
      }
    }

    if (tree.trees) {
      for (const node of tree.trees) {
        result = findPathInFileTree(path, node);
        if (result) break;
      }
    }
  }
  return result;
}

export function getAllBlobsFromTree(tree: IModule, extention: string): IBlob[] {
  let result: IBlob[] = [];

  if (tree) {
    if (tree.trees) {
      for (const node of tree.trees) {
        result = result.concat(getAllBlobsFromTree(node, extention));
      }
    }
  
    for (const node of tree.blobs) {
      if (node.name.split('.').at(-1) === extention) {
        result.push(node);
      }
    }
  }

  return result;
}